as.Date(y,format = "%m-%Y")
class(as.Date(y,format = "%m-%d-%Y"))
as.Date(y,format = "%m-%d-%Y")
y='05-06-2015'
as.Date(y,format = "%m-%d-%Y")
y='05-2015'
as.yearmon(y)
as.yearmon(y, format = "%m-%Y)
as.yearmon(y, format = "%m-%Y")
class(as.yearmon(y, format = "%m-%Y"))
as.Date(as.yearmon(y, format = "%m-%Y")))
as.Date(as.yearmon(y, format = "%m-%Y"))
as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
databyyears$monthyear=as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
View(databyyears)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw()
ggplotly(p)
library("plotly", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +     # Set title
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +     # Set title
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +     # Set title
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp")     # Set title
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp")     # Set title
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows, group=totalMiles)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp")
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp")     # Set title
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
stat_smooth(
color = "#FC4E07", fill = "#FC4E07",
method = "loess"
)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
stat_smooth(
color = "#FC4E07"
method = "loess"
)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
stat_smooth(
color = "#FC4E07"
)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(
color = "#FC4E07"
)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth()
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows, color=yellow)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows, color=yellow)) +
geom_line(shape=1) +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows, color=yellow)) +
geom_line() +     # Set linetype by sex
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1) +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows,colour="#FF9999",fill="#FF9999")) +
geom_line(shape=1) +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows,colour="#FF9999")) +
geom_line(shape=1) +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1) +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,fill="#FF9999") +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colours="#FF9999") +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FF9999") +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FF9999") +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FF9999") +
geom_point(size=2,colour="#FF9999") +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=2,colour="#FF9999") +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=2) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm,colour=black)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm,colour='black')
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm,colour='black',alpha=.4)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm,colour='black',alpha=.1)
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="#FFFF00") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm,colour='black')
ggplotly(p)
p <- ggplot(data=databyyears, aes(x=monthyear, y=rows)) +
geom_line(shape=1,colour="black") +
geom_point(size=1) +         # Use larger points, fill with white
xlab("Time") + ylab("Ridership") + # Set axis labels
ggtitle("Monthly Yellow Cab Ridershp") +# Set title
geom_smooth(se=FALSE, method=lm,colour="#FFFF00")
ggplotly(p)
View(p)
runApp()
runApp()
atabyyears= read.csv('taxidatabymonth.csv', stringsAsFactors = FALSE, header = TRUE)
databyyears$year=str_extract(databyyears$filenames,pattern = '\\d{4}')
databyyears$month=gsub('-','',str_extract(databyyears$filenames,pattern = '-\\d{2}'))
databyyears$monthyear=as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
View(atabyyears)
databyyears= read.csv('taxidatabymonth.csv', stringsAsFactors = FALSE, header = TRUE)
databyyears$year=str_extract(databyyears$filenames,pattern = '\\d{4}')
databyyears$month=gsub('-','',str_extract(databyyears$filenames,pattern = '-\\d{2}'))
databyyears$monthyear=as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
View(databyyears)
databyyears$monthyear=as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
View(databyyears)
as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
databyyears= read.csv('taxidatabymonth.csv', stringsAsFactors = FALSE, header = TRUE)
databyyears$year=str_extract(databyyears$filenames,pattern = '\\d{4}')
databyyears$month=gsub('-','',str_extract(databyyears$filenames,pattern = '-\\d{2}'))
View(databyyears)
databyyears$monthyear=paste0(databyyears$month,'-',databyyears$year)
databyyears$monthyear=as.Date(as.yearmon(databyyears$monthyear, format = "%m-%Y"))
runApp()
runApp()
runApp()
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
hist(heights)
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
pt(q = t.statistic, df = 99, lower.tail = FALSE)#P-value is extremely small;
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
pt(q=t.statistic, df = 178, lower.tail = FALSE)*2
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
t.statistic
pt(q=t.statistic, df = 178, lower.tail = FALSE)*2
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
pt(q=t.statistic, df = 178, lower.tail = FALSE)*2
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
t.test(chickwts$weight, mu = 280, alternative = "less")
runApp()
runApp()
View(databyyears)
View(databyyears)
databyyears%>%group_by(year)%>%summarise(mean(rows,totalMiles,totalMoney))
databyyears%>%group_by(year)%>%summarise(mean(rows))
databyyears%>%group_by(year)%>%summarise(mean(rows))[2014]
databyyears%>%group_by(year)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney))
databyyears%>%group_by(year=2014)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney))
databyyears%>%group_by(year=2014)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney))/databyyears%>%group_by(year=2018)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney))
databyyears%>%group_by(year)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney))
writeclipboard(databyyears%>%group_by(year)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney)))
avgdata=databyyears%>%group_by(year)%>%summarise(mean(rows),mean(totalMiles),mean(totalMoney))
avgdata.to_clipboard(excel=TRUE)
avgdata.to_clipboard(excel=TRUE,sep=',')
View(avgdata)
class(avgdata)
}
write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,...)
}
write.excel(avgdata)
write.excel(avgdata)
View(write.excel)
write.excel(avgdata)
write.excel <- function(x,row.names=FALSE,col.names=TRUE) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names)
}
write.excel(avgdata)
write.excel <- function(x,row.names=TRUE,col.names=TRUE) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names)
}
write.excel(avgdata)
write.excel <- function(x,row.names=TRUE,col.names=TRUE,mode='r') {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names)
}
write.excel(avgdata)
write.excel <- function(x,row.names=TRUE,col.names=TRUE) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,,mode='r')
}
write.excel <- function(x,row.names=TRUE,col.names=TRUE) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,mode='r')
}
write.excel(avgdata)
write.excel <- function(x,row.names=TRUE,col.names=TRUE) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names)
}
write.excel(avgdata)
View(avgdata)
runApp()
sumdata=databyyears%>%group_by(year)%>%summarise(sum(rows),sum(totalMiles),sum(totalMoney))
View(sumdata)
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='kburgess', token='C7F42AEE37EFBF5A055179890AED37A3', secret='lzfbAYyFovlXIi2iYr2JLjH9lCIMdUOn5xVMuh4o')
runApp()
View(data_sampled)
databyyears$month=gsub('-','',str_extract(databyyears$filenames,pattern = '-\\d{2}'))
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='kburgess',
token='C7F42AEE37EFBF5A055179890AED37A3',
secret='lzfbAYyFovlXIi2iYr2JLjH9lCIMdUOn5xVMuh4o')
library(rsconnect)
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('.')
library(rsconnect)
rsconnect::deployApp('.')
